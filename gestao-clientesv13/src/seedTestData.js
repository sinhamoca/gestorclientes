// gestao-clientesv2/src/seedTestData.js
import bcrypt from 'bcrypt';
import { query } from './config/database.js';
import dotenv from 'dotenv';

dotenv.config();

async function seedTestData() {
  try {
    console.log('üå± Iniciando popula√ß√£o de dados de teste...\n');

    // ========== 1. CRIAR 3 USU√ÅRIOS ==========
    console.log('üë• Criando usu√°rios...');
    
    const passwordHash = await bcrypt.hash('teste123', 10);
    
    const users = [
      {
        name: 'Jo√£o Silva',
        email: 'joao@teste.com',
        phone: '85987654321',
        messages_per_minute: 3,
        max_clients: 50,
        description: '3 msgs/min - Muito Seguro'
      },
      {
        name: 'Maria Santos',
        email: 'maria@teste.com',
        phone: '85987654322',
        messages_per_minute: 10,
        max_clients: 30,
        description: '10 msgs/min - R√°pido'
      },
      {
        name: 'Pedro Costa',
        email: 'pedro@teste.com',
        phone: '85987654323',
        messages_per_minute: 7,
        max_clients: 20,
        description: '7 msgs/min - Moderado'
      }
    ];

    const createdUsers = [];

    for (const user of users) {
      const subscriptionStart = new Date();
      const subscriptionEnd = new Date();
      subscriptionEnd.setMonth(subscriptionEnd.getMonth() + 6); // 6 meses

      const result = await query(
        `INSERT INTO users 
         (name, email, password_hash, phone, role, subscription_start, subscription_end, 
          max_clients, max_instances, messages_per_minute, is_active)
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
         RETURNING id, name, email`,
        [
          user.name,
          user.email,
          passwordHash,
          user.phone,
          'user',
          subscriptionStart,
          subscriptionEnd,
          user.max_clients,
          1,
          user.messages_per_minute,
          true
        ]
      );

      createdUsers.push({ ...result.rows[0], ...user });
      console.log(`   ‚úÖ ${user.name} (${user.email}) - ${user.description}`);
    }

    console.log('\nüìã Credenciais de Login:');
    console.log('   Email: joao@teste.com | maria@teste.com | pedro@teste.com');
    console.log('   Senha: teste123\n');

    // ========== 2. CRIAR PLANOS PARA CADA USU√ÅRIO ==========
    console.log('üí≥ Criando planos...');

    const plansData = [
      { name: 'Mensal', duration: 1 },
      { name: 'Trimestral', duration: 3 },
      { name: 'Semestral', duration: 6 },
      { name: 'Anual', duration: 12 }
    ];

    for (const user of createdUsers) {
      for (const plan of plansData) {
        await query(
          `INSERT INTO plans (user_id, name, duration_months)
           VALUES ($1, $2, $3)`,
          [user.id, plan.name, plan.duration]
        );
      }
      console.log(`   ‚úÖ ${user.name}: 4 planos criados`);
    }

    // ========== 3. CRIAR SERVIDORES PARA CADA USU√ÅRIO ==========
    console.log('\nüñ•Ô∏è  Criando servidores...');

    const serversData = [
      { name: 'Servidor Principal', cost: 5.00 },
      { name: 'Servidor Backup', cost: 3.50 },
      { name: 'Servidor VIP', cost: 8.00 }
    ];

    for (const user of createdUsers) {
      for (const server of serversData) {
        await query(
          `INSERT INTO servers (user_id, name, cost_per_screen)
           VALUES ($1, $2, $3)`,
          [user.id, server.name, server.cost]
        );
      }
      console.log(`   ‚úÖ ${user.name}: 3 servidores criados`);
    }

    // ========== 4. BUSCAR IDs DOS PLANOS E SERVIDORES ==========
    const getUserPlansAndServers = async (userId) => {
      const plans = await query('SELECT id FROM plans WHERE user_id = $1 ORDER BY id', [userId]);
      const servers = await query('SELECT id FROM servers WHERE user_id = $1 ORDER BY id', [userId]);
      return {
        planIds: plans.rows.map(p => p.id),
        serverIds: servers.rows.map(s => s.id)
      };
    };

    // ========== 5. CRIAR CLIENTES COM VENCIMENTOS DISTRIBU√çDOS ==========
    console.log('\nüë• Criando clientes...');

    const clientNames = [
      'Carlos Almeida', 'Ana Oliveira', 'Bruno Pereira', 'Carla Souza', 'Daniel Lima',
      'Eduarda Martins', 'Fernando Costa', 'Gabriela Silva', 'Henrique Rocha', 'Isabela Santos',
      'Jos√© Ferreira', 'Larissa Cardoso', 'Marcos Barbosa', 'Nat√°lia Ara√∫jo', 'Ot√°vio Mendes',
      'Paula Ribeiro', 'Rafael Gomes', 'Sara Dias', 'Thiago Castro', 'Vanessa Moreira',
      'William Pinto', 'Yara Teixeira', 'Zilda Correia', 'Andr√© Batista', 'Beatriz Freitas',
      'Caio Monteiro', 'D√©bora Nogueira', 'Elias Carvalho', 'Fl√°via Ramos', 'Gustavo Lopes',
      'Helena Medeiros', 'Igor Azevedo', 'J√∫lia Nunes', 'Kl√©ber Farias', 'Luana Vieira',
      'M√°rcio Torres', 'Nair Rodrigues', 'Oswaldo Cunha', 'Patr√≠cia Reis', 'Quirino Barros',
      'Renata Soares', 'S√©rgio Melo', 'Tatiana Campos', 'Ulisses Xavier', 'Vera Prado',
      'Wagner Duarte', 'Xuxa Moura', 'Yuri Fernandes', 'Z√©lia Braga', 'Alberto Macedo'
    ];

    let totalClients = 0;

    for (const user of createdUsers) {
      const { planIds, serverIds } = await getUserPlansAndServers(user.id);
      
      // Define quantos clientes criar baseado no rate limit
      let numClients;
      if (user.messages_per_minute === 3) {
        numClients = 50; // Jo√£o - 50 clientes
      } else if (user.messages_per_minute === 10) {
        numClients = 30; // Maria - 30 clientes
      } else {
        numClients = 20; // Pedro - 20 clientes
      }

      console.log(`   üì§ ${user.name}: Criando ${numClients} clientes...`);

      // Distribui clientes em diferentes dias de vencimento
      const today = new Date();
      
      for (let i = 0; i < numClients; i++) {
        const clientName = clientNames[i % clientNames.length];
        
        // Distribui vencimentos: hoje (40%), amanh√£ (30%), depois (30%)
        let dueDate = new Date(today);
        const rand = Math.random();
        
        if (rand < 0.4) {
          // 40% vencem hoje (para testar envio imediato)
          dueDate.setDate(today.getDate());
        } else if (rand < 0.7) {
          // 30% vencem amanh√£
          dueDate.setDate(today.getDate() + 1);
        } else {
          // 30% vencem em 2-5 dias
          dueDate.setDate(today.getDate() + Math.floor(Math.random() * 4) + 2);
        }

        // WhatsApp com 9¬∫ d√≠gito variado (alguns com, alguns sem)
        const hasNinthDigit = i % 2 === 0;
        const whatsappBase = `5585${hasNinthDigit ? '9' : ''}`;
        const whatsappNumber = `${whatsappBase}${String(90000000 + i).padStart(8, '0')}`;

        const planId = planIds[i % planIds.length];
        const serverId = serverIds[i % serverIds.length];
        const price = (Math.random() * 50 + 30).toFixed(2); // Entre R$ 30-80

        await query(
          `INSERT INTO clients 
           (user_id, name, whatsapp_number, plan_id, server_id, price_value, due_date, 
            username, password, is_active)
           VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`,
          [
            user.id,
            `${clientName} ${i + 1}`,
            whatsappNumber,
            planId,
            serverId,
            price,
            dueDate,
            `user${i + 1}`,
            `pass${i + 1}`,
            true
          ]
        );

        totalClients++;
      }

      console.log(`   ‚úÖ ${user.name}: ${numClients} clientes criados`);
    }

    // ========== 6. CRIAR TEMPLATES PARA CADA USU√ÅRIO ==========
    console.log('\nüìù Criando templates de mensagem...');

    const templatesData = [
      {
        name: 'Lembrete de Vencimento',
        type: 'vencimento_dia',
        message: `Ol√° {{nome}}! üëã

Seu plano {{plano}} vence HOJE!

üí∞ Valor: {{valor}}
üìÖ Vencimento: {{vencimento}}
üñ•Ô∏è Servidor: {{servidor}}

Para renovar, entre em contato conosco! üìû`
      },
      {
        name: 'Aviso 1 Dia Antes',
        type: 'pre_vencimento',
        message: `Oi {{nome}}! üòä

Seu plano vence AMANH√É!

üìã Plano: {{plano}}
üíµ Valor: {{valor}}
üìÜ Vencimento: {{vencimento}}

Renove hoje e n√£o perca o acesso! ‚úÖ`
      },
      {
        name: 'Aviso 3 Dias Antes',
        type: 'pre_vencimento',
        message: `Ol√° {{nome}}!

‚ö†Ô∏è Seu plano vence em {{dias}} dias

üìã Detalhes:
- Plano: {{plano}}
- Valor: {{valor}}
- Vencimento: {{vencimento}}
- Servidor: {{servidor}}

Renove antecipadamente! üöÄ`
      }
    ];

    const userTemplates = {}; // Para armazenar os IDs dos templates

    for (const user of createdUsers) {
      userTemplates[user.id] = [];
      
      for (const template of templatesData) {
        const result = await query(
          `INSERT INTO message_templates (user_id, name, type, message, is_active)
           VALUES ($1, $2, $3, $4, $5)
           RETURNING id`,
          [user.id, template.name, template.type, template.message, true]
        );
        
        userTemplates[user.id].push(result.rows[0].id);
      }
      
      console.log(`   ‚úÖ ${user.name}: 3 templates criados`);
    }

    // ========== 7. CRIAR LEMBRETES PARA CADA USU√ÅRIO ==========
    console.log('\n‚è∞ Criando lembretes autom√°ticos...');

    // Calcula hor√°rio atual + 2 minutos (para teste imediato)
    const now = new Date();
    const testTime = new Date(now.getTime() + 2 * 60000); // +2 minutos
    const sendTime = `${String(testTime.getHours()).padStart(2, '0')}:${String(testTime.getMinutes()).padStart(2, '0')}:00`;

    for (const user of createdUsers) {
      const templateIds = userTemplates[user.id];
      
      // Lembrete 1: Vence hoje (ser√° enviado em ~2 minutos)
      await query(
        `INSERT INTO reminders (user_id, name, template_id, days_offset, send_time, is_active)
         VALUES ($1, $2, $3, $4, $5, $6)`,
        [user.id, 'Aviso - Vence Hoje', templateIds[0], 0, sendTime, true]
      );

      // Lembrete 2: Vence amanh√£
      await query(
        `INSERT INTO reminders (user_id, name, template_id, days_offset, send_time, is_active)
         VALUES ($1, $2, $3, $4, $5, $6)`,
        [user.id, 'Aviso - Vence Amanh√£', templateIds[1], -1, sendTime, true]
      );

      // Lembrete 3: Vence em 3 dias
      await query(
        `INSERT INTO reminders (user_id, name, template_id, days_offset, send_time, is_active)
         VALUES ($1, $2, $3, $4, $5, $6)`,
        [user.id, 'Aviso - 3 Dias Antes', templateIds[2], -3, sendTime, true]
      );

      console.log(`   ‚úÖ ${user.name}: 3 lembretes configurados`);
    }

    console.log(`\n‚è±Ô∏è  Hor√°rio de envio configurado: ${sendTime} (~2 minutos a partir de agora)`);

    // ========== 8. RESUMO FINAL ==========
    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ DADOS DE TESTE CRIADOS COM SUCESSO!');
    console.log('='.repeat(60));

    console.log('\nüìä RESUMO:');
    console.log('   üë• 3 usu√°rios criados');
    console.log('   üí≥ 12 planos (4 por usu√°rio)');
    console.log('   üñ•Ô∏è  9 servidores (3 por usu√°rio)');
    console.log(`   üë§ ${totalClients} clientes no total`);
    console.log('   üìù 9 templates (3 por usu√°rio)');
    console.log('   ‚è∞ 9 lembretes (3 por usu√°rio)');

    console.log('\nüì± DISTRIBUI√á√ÉO DE CLIENTES:');
    console.log('   ‚Ä¢ Jo√£o (3 msgs/min):  50 clientes');
    console.log('   ‚Ä¢ Maria (10 msgs/min): 30 clientes');
    console.log('   ‚Ä¢ Pedro (7 msgs/min):  20 clientes');

    console.log('\nüìÖ VENCIMENTOS:');
    console.log('   ‚Ä¢ ~40% vencem HOJE (envio em ~2 minutos)');
    console.log('   ‚Ä¢ ~30% vencem amanh√£');
    console.log('   ‚Ä¢ ~30% vencem em 2-5 dias');

    console.log('\nüîê PARA TESTAR:');
    console.log('   1. Fa√ßa login com um dos usu√°rios:');
    console.log('      ‚Ä¢ joao@teste.com | maria@teste.com | pedro@teste.com');
    console.log('      ‚Ä¢ Senha: teste123');
    console.log('\n   2. V√° em "WhatsApp" e escaneie o QR Code');
    console.log('\n   3. Aguarde ~2 minutos e as mensagens come√ßar√£o a ser enviadas!');
    console.log('\n   4. Confira os logs do backend:');
    console.log('      docker logs -f gestao_admin_backend');

    console.log('\nüí° DICA: Os n√∫meros de WhatsApp s√£o fict√≠cios (558590000000+)');
    console.log('   Para testar de verdade, edite alguns clientes com seu n√∫mero real!\n');

  } catch (error) {
    console.error('\n‚ùå Erro ao popular dados:', error);
    throw error;
  }
}

// Executa o seed
seedTestData()
  .then(() => {
    console.log('üéâ Script finalizado com sucesso!\n');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• Erro fatal:', error);
    process.exit(1);
  });
